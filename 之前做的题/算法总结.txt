


1.Map索引法
将数组元素和对应下标作为<key, value>，查找数组中两数之和等于特定值的两个元素。
时间复杂度O(n)，单次遍历可以完成
例题：1.两数之和


2.双指针法 
用于搜索一个有序数组中，相加之和等于特定值的两个元素。
p和q分别位于数组的前后两端，根据指针处两个元素和的大小，进行p++或q--，直到p==q，
可以不遗漏的找到所有相加等于目标值的元素组合。
单次搜索的时间复杂度为O(n)
例题：15.三数之和


3.递归
题目中出现“所有组合”字样时往往用到递归方法，可以列举出所有排列组合的可能
通过队列或栈能优化递归效率
例题：17.电话号码的字母组合


4.拓扑排序
用于解决有向图的排序问题，例如，有些课程有前置课程，需要修完前置课程后才能学习后续课程。
本质是广度优先遍历+贪心算法
需要维护：
	1.入度为0的节点队列
	2.邻接表
	3.入度表
循环判断队列非空，每次循环将队首的节点出队，更新这个节点的后续（邻接）节点的入度减一，
在此减一过程中如果产生了新的入度为0的节点则继续加入队列尾，直到最终队列为空。
例题：210.课程表II

5.最短路径算法（Dijkstra）
有权有向图中，计算从节点A到节点G的最短路径，要计算从A到所有节点的最短路径，一直算到G




















