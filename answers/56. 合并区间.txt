class Solution {
    public int[][] merge(int[][] intervals) {
        if (intervals == null || intervals.length == 0) {
            return null;
        }
        // 1.对原有数组进行排序
        Arrays.sort(intervals, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o1[0] - o2[0];
            }
        });

        // 2.得到根据start[i]进行升序排列的数组进行合并
        List<int[]> result = new ArrayList<>();
        result.add(intervals[0]);
        for (int[] arr : intervals) {
            int count = result.size();
            int[] lastResult = result.get(count - 1);
            if (arr[0] <= lastResult[1]) { // 说明有重叠，需要做合并
                lastResult[1] = Math.max(arr[1], lastResult[1]);
            } else {
                result.add(arr);
            }
        }

        // 3.构造二维数组作为结果输出
        int[][] resultArray = new int[result.size()][2];
        for (int i = 0; i < result.size(); i++) {
            resultArray[i] = result.get(i);
        }
        return resultArray;
    }
}