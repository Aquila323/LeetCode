class Solution {
    Queue<int[]> queue = new LinkedList<>();
    int islandNumber = 0;

    public int numIslands(char[][] grid) {
        int row = grid.length;
        int col = grid[0].length;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] != '1') {
                    continue;
                }
                islandNumber++;
                queue.add(new int[]{i, j});
                grid[i][j] = 0;
                while (!queue.isEmpty()) {
                    int[] arr = queue.poll();
                    int m = arr[0];
                    int n = arr[1];
                    if (m + 1 < row && grid[m + 1][n] == '1') {
                        queue.add(new int[]{m + 1, n});
                        grid[m + 1][n] = 0;
                    }
                    if (m - 1 >= 0 && grid[m - 1][n] == '1') {
                        queue.add(new int[]{m - 1, n});
                        grid[m - 1][n] = 0;
                    }
                    if (n + 1 < col && grid[m][n + 1] == '1') {
                        queue.add(new int[]{m, n + 1});
                        grid[m][n + 1] = 0;
                    }
                    if (n - 1 >= 0 && grid[m][n - 1] == '1') {
                        queue.add(new int[]{m, n - 1});
                        grid[m][n - 1] = 0;
                    }
                }
            }
        }
        return islandNumber;                                                     
    }
}