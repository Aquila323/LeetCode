/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // 后序遍历，先计算出左右子树的最大深度，再计算根节点的最大深度
    // 同时计算根节点的最大直径
    private int maxDiameter = 0;
    
    public int diameterOfBinaryTree(TreeNode root) {
        int maxDepth = getMaxDepth(root);
        return maxDiameter;
    }

    // 计算该节点到叶子结点的最大深度，同时记录根节点的最大直径
    private int getMaxDepth(TreeNode root) {
        if (root == null || (root.left == null && root.right == null)) {
            return 0;
        }
        int leftMaxDepth = getMaxDepth(root.left);
        int rightMaxDepth = getMaxDepth(root.right);

        int resultDiameter = 0;
        if (root.left != null) {
            resultDiameter += (leftMaxDepth + 1);
        }
        if (root.right != null) {
            resultDiameter += (rightMaxDepth + 1);
        }
        maxDiameter = Math.max(resultDiameter, maxDiameter);
        return Math.max(leftMaxDepth, rightMaxDepth) + 1;
    }
}