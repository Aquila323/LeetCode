class Solution {
    public int[] searchRange(int[] nums, int target) {
        if (nums == null) {
            return new int[]{-1, -1};
        }
        int totalLength = nums.length;
        if (totalLength == 0) {
            return new int[]{-1, -1};
        }
        int index = binarySearch(nums, target);
        if (index == -1) {
            return new int[]{-1, -1};
        }
        int firstIndex = index;
        int lastIndex = index;
        for (int i = index; i >= 0; i--) {
            if (nums[i] < target) {
                firstIndex = i + 1;
                break;
            } else {
                firstIndex = i;
            }
        }
        for (int i = index; i < totalLength; i++) {
            if (nums[i] > target) {
                lastIndex = i - 1;
                break;
            } else {
                lastIndex = i;
            }
        }
        return new int[]{firstIndex, lastIndex};
    }

    // 二分查找找到一个可能出现的位置，并不保证这是第一次出现
    private int binarySearch(int[] nums, int target) {
        int startIndex = 0;
        int endIndex = nums.length - 1;
        if (nums[startIndex] == target) {
            return startIndex;
        }
        if (nums[endIndex] == target) {
            return endIndex;
        }
        while (startIndex != endIndex) {
            int midIndex = (startIndex + endIndex) / 2;
            int midValue = nums[midIndex];
            if (midValue == target) {
                return midIndex;
            }
            if (midIndex == startIndex) {
                break;
            }
            if (target < midValue) {
                endIndex = midIndex;
            } else {
                startIndex = midIndex;
            }
        }
        return -1;
    }
}