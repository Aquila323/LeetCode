class Solution {
    public int trap(int[] height) {
        // 计算每一列接水量，可分为三种情况：
        // 1.当前列 < V = min{左最高, 右最高}，当前列注水量= V-当前列
        // 2.当前列 >= min{左最高, 右最高}，当前列不需要注水

        if (height == null) {
            return 0;
        }
        int bucketCount = height.length;
        if (bucketCount <= 2) {
            return 0;
        }

        // 使用动态规划计算每个当前列的左右最高高度
        int[] leftHighest = new int[bucketCount];
        int[] rightHighest = new int[bucketCount];
        leftHighest[0] = 0;
        for (int i = 1; i < bucketCount; i++) {
            leftHighest[i] = Math.max(leftHighest[i - 1], height[i - 1]);
        }
        rightHighest[bucketCount - 1] = 0;
        for (int i = bucketCount - 2; i >= 0; i--) {
            rightHighest[i] = Math.max(rightHighest[i + 1], height[i + 1]);
        }

        // 遍历每列，计算当前列需要注水高度
        int sumRain = 0;
        for (int i = 0; i < bucketCount; i++) {
            int edge = Math.min(leftHighest[i], rightHighest[i]);
            if (height[i] < edge) {
                sumRain += edge - height[i];
            }
        }
        return sumRain;
    }
}