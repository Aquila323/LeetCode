


************************ 第一部分 树 ************************


使用迭代方法遍历二叉树时，DFS是通过栈实现的，BFS是通过队列。
DFS分为三种：前序、中序、后序，指根节点的被访问顺序，控制根节点、左右节点的入栈顺序可以实现三种顺序。


递归方法，三种访问顺序的实现方法都一样，用栈实现的话，前序遍历是最好实现的，按照从根节点出发的顺序入栈出栈即可。
中序和后序遍历则需要额外控制出栈入栈顺序。
树的深度计算，通过后序遍历实现。




红黑树（RBT）

特征：非严格平衡二叉树（AVL树），只有黑色节点是平衡的，左子树和右子树的黑色节点层数相同
要求：
	1.所有节点非黑即红
	2.根节点是黑色
	3.叶子节点是黑色，NULL
	4.任意两个相邻节点不能同时为红色
	5.任意节点到他的所有叶子结点路径上的黑节点数量相同（平衡关键）

查询效率略低于AVL树，插入删除效率更高





InnoDB是MySQL数据库的引擎


B树



B+树

叶子节点是数据页，非叶子节点是索引页。
索引页可以分多级（多阶），每级索引页都指向了下一级更具体的位置。

MySQL使用B+树建立表数据，叶子节点（都在同一层）使用双向链表链接，便于（大于、小于）范围查询

回表：使用非主键创建的索引，为避免数据冗余问题，非主键建立的索引会指回到主键索引上
主键索引
聚集索引：索引和数据在同一个表里

最左前缀原则，判断多key是否可以走索引，例如，创建了索引表_bcd，给出查询语句

select * from t1 where c=1 and d=1;

就无法使用_bcd索引去查询，因为不满足最左前缀原则，没有关键字b























